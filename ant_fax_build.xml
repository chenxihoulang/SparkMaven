<?xml version="1.0"?>
<project name="fax" basedir="." default="build">
    <property name="src.dir" value="src" />
    <property name="web.dir" value="war" />
    <property name="build.dir" value="${web.dir}/WEB-INF/classes" />
    <property name="name" value="fax" />

    <path id="master-classpath">
        <fileset dir="${web.dir}/WEB-INF/lib">
            <include name="*.jar" />
        </fileset>
        <pathelement path="${build.dir}" />
    </path>

    <target name="build" description="Compile source tree java files">
        <mkdir dir="${build.dir}" />
        <javac destdir="${build.dir}" source="1.8" target="1.8" debug="true" deprecation="false"
            optimize="false" failonerror="true">
            <src path="${src.dir}" />
            <classpath refid="master-classpath" />
        </javac>
    </target>

    <target name="clean" description="Clean output directories">
        <delete>
            <fileset dir="${build.dir}">
                <include name="**/*.class" />
            </fileset>
        </delete>
    </target>


    <!--    这里，web.dir 属性指出了 web 源文件的路径。在我们的案例中， web 源文件路径也就是存放 util.jar 的地方。

    在我们的案例中，build.dir 属性指出了配置文件夹的存储路径，也就是存放 util.jar 类文件的地方。

    在上面的代码中，我们利用来自 faxapp.util 包中的类文件创建了一个名为 util.jar 的 jar 包。
    然而，我们排除名字为 Test 的类文件。输出的 jar 文件将会存放在 web 应用的配置文件 lib 中。
    如果我们想 util.jar 成为可执行文件，只需在 Main-Class 元属性中加入manifest

    ant build-jar
    -->

    <target name="build-jar">
        <jar destfile="${web.dir}/lib/util.jar" basedir="${build.dir}/classes"
            includes="faxapp/util/**" excludes="**/Test.class">
            <manifest>
                <attribute name="Main-Class" value="com.tutorialspoint.util.FaxUtil" />
            </manifest>
        </jar>
    </target>

    <!--    该 build.dir 变量指向输出文件夹，WAR 的包能在该文件夹下找到。 通常情况下， 类将被绑定到 WAR 文件下的 WEB-INF/classes 文件夹下。

    在这个例子中，我们创建了一个名为 fax.war 的 war 文件。WEB.XML 文件可以从 web 源文件中获取。 所有 web 下来自 “WebContent” 的文件都被复制到 WAR 文件中。

    WEB-INF/lib 文件夹中存储了来自于第三方 jar 文件夹中的 jar 文件。但是，我们排除了 portlet.jar，因为该 jar 文件已经存在于应用服务器的 lib 文件夹中了。最后，我们从一个构建目录下的 web 文件夹中复制所有的类，并将复制的类全部放入 WEB-INF/classes 文件夹下。

    将一个 war 任务封装到一个 Ant 任务中并运行它。 这将在指定位置创建一个 WAR 文件。-->
    <target name="build-war">
        <war destfile="fax.war" webxml="${web.dir}/web.xml">

            <fileset dir="${web.dir}/WebContent">
                <include name="**/*.*" />
            </fileset>

            <lib dir="thirdpartyjars">
                <exclude name="portlet.jar" />
            </lib>

            <classes dir="${build.dir}/web" />

        </war>
    </target>
</project>